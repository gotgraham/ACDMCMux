#include <SPI.h>
#include "mcp_can.h"
#include <Arduino.h>
#include <U8g2lib.h>
#include <EEPROM.h>

// Configure CAN and Display
MCP_CAN CAN(10);                                   
U8G2_SSD1322_NHD_256X64_F_4W_HW_SPI u8g2(U8G2_R0, /* cs=*/ 9, /* dc=*/ 8, /* reset=*/ 7);


//
// LOGO
//


#define logo_width 240
#define logo_height 50
static char logo[] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0x01, 
  0x00, 0xF0, 0xFF, 0x03, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0xFF, 0x3F, 0x00, 
  0x80, 0xFF, 0x1F, 0xFE, 0xFF, 0x00, 0x00, 0xF8, 0xFF, 0x01, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xFE, 0xFF, 0x03, 0x00, 0xFC, 0xFF, 0x0F, 0x00, 0x00, 
  0x00, 0xFE, 0xFF, 0xFF, 0x7F, 0x00, 0xE0, 0xFF, 0x7F, 0xFF, 0xFF, 0x03, 
  0x00, 0xFE, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x80, 0xFF, 0xFF, 0x0F, 
  0x00, 0xFE, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 
  0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0x80, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 
  0x00, 0x00, 0x80, 0xFF, 0xFF, 0x3F, 0x80, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 
  0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 0x07, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0x0F, 
  0xC0, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0x00, 0xF8, 0xFF, 0xF1, 0xFF, 
  0xE1, 0xFF, 0xF3, 0xFF, 0x07, 0x00, 0xF8, 0xFF, 0x01, 0x00, 0xFF, 0xBF, 
  0xFF, 0x3F, 0xFF, 0x7F, 0xFC, 0x7F, 0xFC, 0xFF, 0xF8, 0xFF, 0x01, 0x00, 
  0x00, 0x00, 0xFC, 0x7F, 0xE0, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0x07, 0xF0, 
  0xFF, 0xFF, 0x00, 0x00, 0xFE, 0xFF, 0xFF, 0x0F, 0xFE, 0x1F, 0xF8, 0xFF, 
  0xFF, 0x3F, 0xE0, 0xFF, 0x03, 0x00, 0x00, 0x00, 0xFF, 0x1F, 0xC0, 0xFF, 
  0xFF, 0x7F, 0x80, 0xFF, 0x1F, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0xF8, 0xFF, 
  0xFF, 0x03, 0xF8, 0x1F, 0xE0, 0xFF, 0xFF, 0x1F, 0xC0, 0xFF, 0x0F, 0x00, 
  0x00, 0xE0, 0xFF, 0x07, 0x00, 0xFE, 0xFF, 0x0F, 0x00, 0xFC, 0xFF, 0xFF, 
  0xFF, 0x0F, 0x00, 0x00, 0xC0, 0xFF, 0x7F, 0x00, 0xC0, 0x03, 0x00, 0xFF, 
  0xFF, 0x07, 0x00, 0xFE, 0x7F, 0x00, 0x00, 0xF8, 0xFF, 0x01, 0x00, 0xFC, 
  0xFF, 0x03, 0x00, 0xF0, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x80, 0xFF, 
  0x1F, 0x00, 0x00, 0x00, 0x00, 0xFC, 0xFF, 0x01, 0x00, 0xFC, 0xFF, 0x00, 
  0x00, 0xFC, 0x7F, 0x00, 0x00, 0xF0, 0xFF, 0x01, 0x00, 0xC0, 0xFF, 0xFF, 
  0xFF, 0x1F, 0x00, 0x03, 0x00, 0xFE, 0x0F, 0x00, 0x00, 0x00, 0x00, 0xF8, 
  0x7F, 0x00, 0x00, 0xF8, 0xFF, 0x01, 0x00, 0xFC, 0x7F, 0x60, 0x00, 0xC0, 
  0x7F, 0x80, 0x00, 0x80, 0xFF, 0xFF, 0xFF, 0x7F, 0x00, 0x06, 0x00, 0xF8, 
  0x03, 0x04, 0x00, 0x10, 0x00, 0xF0, 0x3F, 0x40, 0x00, 0xE0, 0xFF, 0x01, 
  0x00, 0xFC, 0x0F, 0xE0, 0x03, 0x00, 0x1F, 0x00, 0x0F, 0x00, 0xFF, 0x1F, 
  0x80, 0x7F, 0x00, 0x7E, 0x00, 0xF8, 0x00, 0x3C, 0x00, 0xF0, 0x00, 0xE0, 
  0x0F, 0xC0, 0x03, 0xC0, 0xFF, 0x01, 0x00, 0xFC, 0x0F, 0xE0, 0x0F, 0x00, 
  0x1F, 0x80, 0x1F, 0x80, 0xFF, 0x0F, 0x80, 0x7F, 0x00, 0xFF, 0x00, 0x78, 
  0x00, 0x7C, 0x00, 0xF0, 0x01, 0xE0, 0x0F, 0xC0, 0x0F, 0xE0, 0xFF, 0x01, 
  0x00, 0xFC, 0x0F, 0xE0, 0x1F, 0x00, 0x1F, 0x80, 0x3F, 0xE0, 0xFF, 0x07, 
  0xC0, 0x7F, 0x00, 0xFE, 0x01, 0xF8, 0x00, 0xFC, 0x01, 0xF0, 0x07, 0xC0, 
  0x0F, 0xC0, 0x1F, 0xF8, 0xFF, 0x01, 0x00, 0xFE, 0x0F, 0xE0, 0x3F, 0x00, 
  0x1F, 0x00, 0xFF, 0xF8, 0xFF, 0x07, 0xE0, 0x7F, 0x00, 0xFF, 0x01, 0x78, 
  0x00, 0xFC, 0x03, 0xF0, 0x0F, 0xE0, 0x0F, 0xC0, 0x7F, 0xFC, 0xFF, 0x00, 
  0x00, 0xFC, 0x0F, 0xE0, 0x3F, 0x00, 0x1F, 0x80, 0xFF, 0xFF, 0xFF, 0x01, 
  0xF0, 0x7F, 0x00, 0xFE, 0x00, 0xF8, 0x00, 0xFC, 0x03, 0xF0, 0x0F, 0xE0, 
  0x0F, 0xC0, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0xFC, 0x0F, 0xE0, 0x3F, 0x00, 
  0x1F, 0x80, 0xFF, 0xFF, 0xFF, 0x00, 0xF0, 0x7F, 0x00, 0xFF, 0x01, 0x78, 
  0x00, 0xFC, 0x03, 0xF0, 0x0F, 0xE0, 0x0F, 0xC0, 0xFF, 0xFF, 0x07, 0x00, 
  0x00, 0xFC, 0x0F, 0xE0, 0x3F, 0x00, 0x1F, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 
  0xF8, 0x7F, 0x00, 0xFE, 0x01, 0xF8, 0x00, 0xFC, 0x03, 0xF0, 0x0F, 0xE0, 
  0x0F, 0xC0, 0xFF, 0xFF, 0x01, 0x00, 0x00, 0xFC, 0x0F, 0xE0, 0x3F, 0x00, 
  0x1F, 0x80, 0xFF, 0xFF, 0x3F, 0x00, 0x00, 0x70, 0x00, 0xFF, 0x01, 0x7C, 
  0x00, 0xFC, 0x03, 0xF0, 0x0F, 0xC0, 0x0F, 0xC0, 0xFF, 0x3F, 0x00, 0x00, 
  0x00, 0xFE, 0x0F, 0xE0, 0x3F, 0x00, 0x1F, 0x80, 0xFF, 0xFF, 0x3F, 0x00, 
  0x00, 0x7C, 0x00, 0xFE, 0x00, 0xF8, 0x00, 0xFC, 0x03, 0xE0, 0x0F, 0xE0, 
  0x0F, 0xC0, 0xFF, 0x1F, 0x00, 0x00, 0x00, 0xFC, 0x0F, 0x00, 0x00, 0x00, 
  0x1F, 0x00, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0x7E, 0x00, 0xFE, 0x01, 0x78, 
  0x00, 0xFC, 0x03, 0xF0, 0x0F, 0xC0, 0x0F, 0xC0, 0xFF, 0x3F, 0x00, 0x00, 
  0x00, 0xFC, 0x0F, 0x00, 0x00, 0x00, 0x1F, 0x80, 0xFF, 0xFF, 0x0F, 0x00, 
  0x00, 0x7F, 0x00, 0xFF, 0x01, 0xF8, 0x00, 0xFC, 0x03, 0xF0, 0x0F, 0xE0, 
  0x0F, 0xC0, 0xFF, 0x3F, 0x00, 0x00, 0x00, 0xFC, 0x0F, 0x00, 0x00, 0x00, 
  0x1F, 0x80, 0xFF, 0xFF, 0x07, 0x00, 0xE0, 0x7F, 0x00, 0xFE, 0x01, 0x78, 
  0x00, 0xFC, 0x03, 0xF0, 0x0F, 0xE0, 0x0F, 0xC0, 0xFF, 0xFF, 0x03, 0x00, 
  0x00, 0xFE, 0x0F, 0x00, 0x00, 0x00, 0x1F, 0x00, 0xFF, 0xFF, 0xDF, 0x07, 
  0xF0, 0x7F, 0x00, 0xFE, 0x00, 0xF8, 0x00, 0xFC, 0x03, 0xF0, 0x0F, 0xE0, 
  0x0F, 0xC0, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 0xFC, 0x0F, 0x00, 0x00, 0x00, 
  0x1F, 0x80, 0xFF, 0xFF, 0xFF, 0x07, 0xF8, 0x7F, 0x00, 0xFF, 0x01, 0x78, 
  0x00, 0xFC, 0x03, 0xF0, 0x0F, 0xE0, 0x0F, 0xC0, 0xFF, 0xFF, 0x3F, 0x00, 
  0x00, 0xFC, 0x0F, 0xE0, 0x3F, 0x00, 0x1F, 0x80, 0x7F, 0xF0, 0xFF, 0x01, 
  0xFE, 0x7F, 0x00, 0xFE, 0x01, 0xF8, 0x00, 0xFC, 0x03, 0xF0, 0x0F, 0xC0, 
  0x0F, 0xC0, 0x3F, 0xFC, 0xFF, 0x01, 0x00, 0xFC, 0x0F, 0xE0, 0x3F, 0x00, 
  0x1F, 0x80, 0x3F, 0xC0, 0xFF, 0x00, 0xFF, 0x7F, 0x00, 0xFF, 0x01, 0x78, 
  0x00, 0xFC, 0x03, 0xF0, 0x0F, 0xE0, 0x0F, 0xC0, 0x0F, 0xF0, 0xFF, 0x01, 
  0x00, 0xFE, 0x0F, 0xE0, 0x3F, 0x00, 0x1F, 0x00, 0x0F, 0x80, 0xFF, 0x80, 
  0xFF, 0x7F, 0x00, 0xFE, 0x00, 0xF8, 0x00, 0xFC, 0x03, 0xF0, 0x0F, 0xE0, 
  0x0F, 0xC0, 0x07, 0xE0, 0xFF, 0x01, 0x00, 0xFF, 0x0F, 0xE0, 0x3F, 0x00, 
  0x1F, 0x00, 0x06, 0x00, 0xFE, 0xC0, 0xFF, 0x7F, 0x00, 0x3F, 0x00, 0x78, 
  0x00, 0xFC, 0x03, 0xF0, 0x0F, 0xE0, 0x0F, 0x80, 0x01, 0x80, 0xFF, 0x01, 
  0x80, 0xFF, 0x03, 0x80, 0x0F, 0x00, 0x7E, 0x00, 0x00, 0xC0, 0x7F, 0xF0, 
  0xFF, 0x3F, 0x00, 0x06, 0x00, 0x7C, 0x00, 0xF0, 0x00, 0xE0, 0x03, 0x80, 
  0x3F, 0x00, 0x00, 0xF0, 0xFF, 0x01, 0xC0, 0xFF, 0x00, 0x00, 0x02, 0x00, 
  0xF8, 0x01, 0x00, 0xF0, 0x3F, 0xFC, 0xFF, 0x1F, 0x00, 0x01, 0x00, 0x1F, 
  0x00, 0x60, 0x00, 0xC0, 0x01, 0x00, 0xFE, 0x00, 0x00, 0xFC, 0xFF, 0x01, 
  0xC0, 0xFF, 0x01, 0x00, 0x07, 0x00, 0xFC, 0x03, 0x00, 0xFC, 0x1F, 0xFE, 
  0xFF, 0x07, 0x00, 0x00, 0x80, 0x1F, 0x00, 0x60, 0x00, 0xC0, 0x01, 0x00, 
  0xFF, 0x01, 0x00, 0xFE, 0x7F, 0x00, 0x80, 0xFF, 0x0F, 0xE0, 0x3F, 0x00, 
  0xFF, 0x1F, 0x80, 0xFF, 0x8F, 0xFF, 0xFF, 0x1F, 0x00, 0x00, 0xF0, 0x7F, 
  0x00, 0xFC, 0x01, 0xF0, 0x0F, 0xC0, 0xFF, 0x07, 0xC0, 0xFF, 0x1F, 0x00, 
  0x00, 0xFF, 0x1F, 0xF0, 0x7F, 0xC0, 0xFF, 0x7F, 0xC0, 0xFF, 0xCF, 0xFF, 
  0xFF, 0x7F, 0x00, 0x00, 0xFC, 0xFF, 0x01, 0xFF, 0x07, 0xFC, 0x3F, 0xF0, 
  0xFF, 0x1F, 0xE0, 0xFF, 0x03, 0x00, 0x00, 0xFE, 0x7F, 0xFC, 0xFF, 0xF0, 
  0xFF, 0xFF, 0xF0, 0xFF, 0xF7, 0xFF, 0xF9, 0xFF, 0x01, 0x00, 0xFE, 0xFF, 
  0x87, 0xFF, 0x1F, 0xFE, 0x7F, 0xF8, 0xFF, 0x7F, 0xF8, 0xFF, 0x01, 0x00, 
  0x00, 0xFC, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFB, 0xFF, 0xFF, 0xFF, 
  0xF0, 0xFF, 0x01, 0x00, 0xFF, 0xFF, 0xEF, 0xFF, 0xBF, 0xFF, 0xFF, 0xFD, 
  0xFF, 0xFF, 0xFE, 0x7F, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0xFF, 0xFF, 0xFF, 
  0x1F, 0xFF, 0xFF, 0xFF, 0xFF, 0x3F, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xCF, 0xFF, 0xFF, 0x0F, 0x00, 0x00, 
  0x00, 0x80, 0xFF, 0xFF, 0xFF, 0xFF, 0x1F, 0xFE, 0xFF, 0xFF, 0xFF, 0x1F, 
  0x00, 0xFE, 0xFF, 0xFF, 0xFF, 0xF1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
  0x07, 0xFF, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xF9, 0xFF, 
  0x07, 0xFC, 0xFF, 0xFF, 0xFF, 0x0F, 0x00, 0xF8, 0xFF, 0xFF, 0x7F, 0xE0, 
  0xFF, 0x9F, 0xFF, 0x3F, 0xFE, 0xFF, 0x01, 0xFE, 0xFF, 0x01, 0x00, 0x00, 
  0x00, 0x00, 0xF8, 0x7F, 0xE0, 0xFF, 0x01, 0xF0, 0xFF, 0xFD, 0xFF, 0x07, 
  0x00, 0xF0, 0xFF, 0xFF, 0x3F, 0x80, 0xFF, 0x0F, 0xFF, 0x1F, 0xF8, 0x7F, 
  0x00, 0xF8, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0xC0, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
  };



//
// Definitions
//

#define TITLE 24
#define BREAK 135
#define VALUE 152
#define UNITS 200

#define DC_DC 0
#define IGBT 1
#define CURRENT 2

#define uint16 unsigned int
#define uint8 unsigned char
#define uint32 unsigned long int

// DC-DC Status
struct DCDCStatus {
 float temp1;
 float temp2;
 float voltage;
 float current;       
} dc_dc_status;

// Controller Status
struct ControllerStatus {
  float temps[6];
  float current[4];
} controller_status;

// Display state
uint8 displayState = DC_DC;

// Fan State
bool fanEnabled = false;
uint8 fanPin = 23;

// Button Handing
const int buttonPin = 22;
int buttonState = HIGH;            
int lastButtonState = HIGH;
unsigned long lastDebounceTime = 0;
unsigned long debounceDelay = 50;

//
// Helper Functions
//

float cToF(float val) {
  return (val * 9/5) + 32;
}

void printEntry(uint8 pos_x, uint8 pos_y, float value, uint8 precision = 1) {
  char str_value[16];
  dtostrf(value, 5, precision, str_value);
  u8g2.drawStr(pos_x, pos_y, str_value);
}


#define htons(x) ( ((x)<< 8 & 0xFF00) | \
                   ((x)>> 8 & 0x00FF) )
#define ntohs(x) htons(x)

// 
// DC DC 
//

void dcDcCheckStatus(void) {
  unsigned char len = 0;
  unsigned char buf[8];

  if(CAN_MSGAVAIL == CAN.checkReceive())
  {
    CAN.readMsgBuf(&len, buf);
    
    unsigned long canId = CAN.getCanId();

    // Read status info from the DC-DC
    if (canId == 0x1d6) {
      dc_dc_status.temp1 = cToF(buf[3] - 40);
      dc_dc_status.temp2 = cToF(buf[4] - 40);
      dc_dc_status.voltage = buf[2] / 12.7;
      dc_dc_status.current = buf[5];
    }
  }
  // Enable the DC DC
  unsigned char msg[2] = {0xA0, 0xAF};
  CAN.sendMsgBuf(0x01D4, 0, 2, msg);
}

//
// Controller
//

uint16 readControllerValue(char request)
{
  uint16 result = 0;   
  uint16 masked_result = 0; 
    
  while(Serial2.read() >= 0); // Depleat the receive buffer

  do {
    Serial2.write(request); 
    
    // Request value    
    if (Serial2.available() > 0) {      
      char inBuff[3]; // Read a buffer
      Serial2.readBytes(inBuff, sizeof(inBuff));
      result = ntohs(*((uint16*)&inBuff[0]));        
    } 
    delay(10);

    masked_result = result & 0xF000;
    
  } while(masked_result != 0x8000 && masked_result != 0x7000 && masked_result != 0x6000);
 
  Serial2.write('*'); // Stop value
 
  return result;
}

void storeTemp(uint8 which, uint16 raw_value) {
  float temp = ((float)(raw_value & 0x7FFF) / 2);
  if (temp > 0 && temp < 150) {
    controller_status.temps[which] = temp;
  }
}

void storeCurrent(uint8 which, uint16 raw_value) {
  float current = raw_value >= 0x8000 ? (float)(raw_value & 0x7FFF) : 0;//(float)(raw_value - 0x8000);
  current /= 10;
  
  controller_status.current[which] = current;
}

void controllerCheckStatus() {
  static uint8 current_temp_sensor = 0;
  storeTemp(current_temp_sensor, readControllerValue(current_temp_sensor + 108)); // 108 is ASCII for 'l'
  if (current_temp_sensor == 5) {
    current_temp_sensor = 0;
  }
  else {
    ++current_temp_sensor;
  }

#if 0
  static uint8 which_current_sensor = 0;
  switch (which_current_sensor) {
    case 0: 
      storeCurrent(0, readControllerValue('c'));
      break;
    case 1: 
      storeCurrent(1, readControllerValue('d'));
      break;
    case 2: 
      storeCurrent(2, readControllerValue('t'));
      break;
    default:
      storeCurrent(3, readControllerValue('u'));
      break;  
  }
  if (which_current_sensor == 3) {
    which_current_sensor = 0;
  }
  else {
    ++which_current_sensor;
  }
#endif
}

//
// Page Handlers
//

void pageDcDc()
{
  u8g2.setFont(u8g2_font_torussansbold8_8r);
  
  u8g2.drawStr(0,8,"DC-DC");
  
  u8g2.drawStr(TITLE,22,"Voltage");
  u8g2.drawStr(TITLE,32,"Current");
  u8g2.drawStr(TITLE,42,"Temp 1");
  u8g2.drawStr(TITLE,52,"Temp 2");

  u8g2.drawStr(BREAK,22,":");
  u8g2.drawStr(BREAK,32,":");
  u8g2.drawStr(BREAK,42,":");
  u8g2.drawStr(BREAK,52,":");
    
  u8g2.drawStr(UNITS,22,"V");
  u8g2.drawStr(UNITS,32,"A");
  u8g2.drawStr(UNITS,42,"F");
  u8g2.drawStr(UNITS,52,"F");
}

void updateDcDc()
{
  printEntry(VALUE, 22, dc_dc_status.voltage);
  printEntry(VALUE, 32, dc_dc_status.current);
  printEntry(VALUE, 42, dc_dc_status.temp1);
  printEntry(VALUE, 52, dc_dc_status.temp2);

  // Show the fan status
  u8g2.drawStr(0, 60, (fanEnabled ? "F" : " "));
}

void pageIGBT()
{
  u8g2.setFont(u8g2_font_torussansbold8_8r);
  
  u8g2.drawStr(0,8,"IGBT Temps");

  u8g2.drawStr(32,28,"1");
  u8g2.drawStr(32,38,"2");
  u8g2.drawStr(32,48,"3");
  u8g2.drawStr(140,28,"4");
  u8g2.drawStr(140,38,"5");
  u8g2.drawStr(140,48,"6");

  u8g2.drawStr(40,28,":");
  u8g2.drawStr(40,38,":");
  u8g2.drawStr(40,48,":");
  u8g2.drawStr(148,28,":");
  u8g2.drawStr(148,38,":");
  u8g2.drawStr(148,48,":");
    
  u8g2.drawStr(100,28,"C");
  u8g2.drawStr(100,38,"C");
  u8g2.drawStr(100,48,"C");
  u8g2.drawStr(208,28,"C");
  u8g2.drawStr(208,38,"C");
  u8g2.drawStr(208,48,"C");
}

void updateIGBT()
{
  printEntry(55, 28, controller_status.temps[0]);
  printEntry(55, 38, controller_status.temps[1]);
  printEntry(55, 48, controller_status.temps[2]);
  printEntry(163, 28, controller_status.temps[3]);
  printEntry(163, 38, controller_status.temps[4]);
  printEntry(163, 48, controller_status.temps[5]);
}


void pageCurrent()
{
  u8g2.setFont(u8g2_font_torussansbold8_8r);
  
  u8g2.drawStr(0,8,"Phase Current");
  
  u8g2.drawStr(TITLE-16,22,"Filtered");
  u8g2.drawStr(TITLE-16,32,"Requested");
  u8g2.drawStr(TITLE-16,42,"Maximum");
  u8g2.drawStr(TITLE-16,52,"Field Weakening");

  u8g2.drawStr(BREAK,22,":");
  u8g2.drawStr(BREAK,32,":");
  u8g2.drawStr(BREAK,42,":");
  u8g2.drawStr(BREAK,52,":");
    
  u8g2.drawStr(UNITS,22,"A");
  u8g2.drawStr(UNITS,32,"A");
  u8g2.drawStr(UNITS,42,"A");
  u8g2.drawStr(UNITS,52,"A");
}

void updateCurrent()
{
  printEntry(VALUE, 22, controller_status.current[0]);
  printEntry(VALUE, 32, controller_status.current[1]);
  printEntry(VALUE, 42, controller_status.current[2]);
  printEntry(VALUE, 52, controller_status.current[3]);
}

void drawPage()
{
  u8g2.clearBuffer();
      
  switch(displayState)
  {
    case DC_DC:
      pageDcDc();
      break;
    case IGBT: 
      pageIGBT();
      break;
    case CURRENT:
      pageCurrent();
      break;
    default:
      pageDcDc(); 
  }
}

// Update page
void updatePage()
{
  switch(displayState)
  {
    case DC_DC:
      updateDcDc();
      break;
    case IGBT:
      updateIGBT();
      break;
    case CURRENT:
      updateCurrent();
      break;
    default: 
      updateDcDc();
      break;
  }
  u8g2.sendBuffer();
}

void stateHandler() {
  int reading = digitalRead(buttonPin);

  if (reading != lastButtonState) {
    lastDebounceTime = millis();
  }

  if ((millis() - lastDebounceTime) > debounceDelay) {     
    if (reading != buttonState) {
      buttonState = reading;

      if (buttonState == HIGH) {  
        if(displayState == DC_DC){
          displayState = IGBT;
        }
        //else if (displayState == IGBT) {
        //  displayState = CURRENT;
        //}
        else{
          displayState = DC_DC;
        }

        EEPROM.write(0, displayState);
                       
        drawPage();
      }
    }
  }
  lastButtonState = reading;
}

void fanHandler() {
  if (dc_dc_status.temp1 > 100.0 ||  dc_dc_status.temp2 > 100.0) {
    fanEnabled = true;
  }
  else if ( dc_dc_status.temp1 < 90 &&  dc_dc_status.temp2 < 90.0) {
    fanEnabled = false;
  }
  
  digitalWrite(fanPin, fanEnabled);
}

void drawLogo() {
  u8g2.clearBuffer();
  u8g2.drawXBM(10, 5, 240, 50, logo);
  u8g2.sendBuffer();
  delay(3000);
}

void setup()
{
    // Initialize Display
    u8g2.begin();

    //Serial
    Serial2.begin(115200);
    Serial.begin(115200);
  
    // Clear the data
    memset(&dc_dc_status, 0, sizeof(DCDCStatus));
    memset(&controller_status, 0, sizeof(ControllerStatus));

    // Set the fan state
    pinMode(fanPin, OUTPUT);
    digitalWrite(fanPin, fanEnabled);

    // Mode changing button
    pinMode(buttonPin, INPUT_PULLUP);
    
    // Initialize the CAN
    while (CAN_OK != CAN.begin(CAN_500KBPS))              // init can bus : baudrate = 500k
    {
        Serial.println("CAN BUS Shield init fail");
        Serial.println(" Init CAN BUS Shield again");
        delay(100);
    }
    Serial.println("CAN BUS Shield init ok!");

    drawLogo();
    drawPage();
}

void loop()
{
  stateHandler();
  fanHandler();
  updatePage();
  dcDcCheckStatus(); 
  controllerCheckStatus();
}

